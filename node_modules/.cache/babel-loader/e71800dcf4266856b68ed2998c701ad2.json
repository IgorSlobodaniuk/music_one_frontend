{"ast":null,"code":"module.exports = {\n  post: function post(url, headers, payload, cb) {\n    this.add(url, headers, payload, function (res) {\n      cb(res);\n    });\n  },\n  add: function add(url, headers, payload, cb) {\n    var options = {\n      method: \"POST\",\n      headers: headers,\n      body: JSON.stringify(payload)\n    }; // create fetch promise\n\n    var promise = fetch(url, options); // await promise\n\n    promise.then(function (response) {\n      return response.json();\n    }).then(function (result) {\n      // success - process response\n      if (result.error) {\n        cb({\n          error: result.error\n        });\n      } else {\n        cb({\n          result: result\n        });\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/home/igor/kateryna_project/frontend/music_one_frontend/src/utils/requests/post.js"],"names":["module","exports","post","url","headers","payload","cb","add","res","options","method","body","JSON","stringify","promise","fetch","then","response","json","result","error"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB;AACbC,EAAAA,IAAI,EAAE,cAASC,GAAT,EAAcC,OAAd,EAAuBC,OAAvB,EAAgCC,EAAhC,EAAoC;AACtC,SAAKC,GAAL,CAASJ,GAAT,EAAcC,OAAd,EAAuBC,OAAvB,EAAgC,UAACG,GAAD,EAAS;AACrCF,MAAAA,EAAE,CAACE,GAAD,CAAF;AACH,KAFD;AAGH,GALY;AAObD,EAAAA,GAAG,EAAE,aAASJ,GAAT,EAAcC,OAAd,EAAuBC,OAAvB,EAAgCC,EAAhC,EAAoC;AAErC,QAAIG,OAAO,GAAG;AACVC,MAAAA,MAAM,EAAE,MADE;AAEVN,MAAAA,OAAO,EAAEA,OAFC;AAGVO,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,OAAf;AAHI,KAAd,CAFqC,CAQrC;;AACA,QAAIS,OAAO,GAAGC,KAAK,CAACZ,GAAD,EAAOM,OAAP,CAAnB,CATqC,CAWrC;;AACAK,IAAAA,OAAO,CAACE,IAAR,CAAa,UAASC,QAAT,EAAkB;AAC3B,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACH,KAFD,EAEGF,IAFH,CAEQ,UAASG,MAAT,EAAgB;AACpB;AACA,UAAGA,MAAM,CAACC,KAAV,EAAiB;AACbd,QAAAA,EAAE,CAAC;AAACc,UAAAA,KAAK,EAAED,MAAM,CAACC;AAAf,SAAD,CAAF;AACH,OAFD,MAGK;AACDd,QAAAA,EAAE,CAAC;AAACa,UAAAA,MAAM,EAAEA;AAAT,SAAD,CAAF;AACH;AACJ,KAVD;AAWH;AA9BY,CAAjB","sourcesContent":["module.exports = {\n    post: function(url, headers, payload, cb) {\n        this.add(url, headers, payload, (res) => {\n            cb(res)\n        })\n    },\n\n    add: function(url, headers, payload, cb) {\n\n        let options = {\n            method: \"POST\",\n            headers: headers,\n            body: JSON.stringify(payload),\n        };\n\n        // create fetch promise\n        let promise = fetch(url , options);\n\n        // await promise\n        promise.then(function(response){\n            return response.json();\n        }).then(function(result){\n            // success - process response\n            if(result.error) {\n                cb({error: result.error})\n            }\n            else {\n                cb({result: result})\n            }\n        })\n    },\n};\n"]},"metadata":{},"sourceType":"module"}